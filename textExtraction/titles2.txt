
Start from a client-server architecture
Consensus: blockchain nodes make agreement
Structured Peer to Peer (P2P) system
Tools for smart contract development
Remix
Recap
Using Remix to edit and test the contract
A smart contract example
Cost of a smart contract
Chapter 4-2: Decentralized Application 
Ethereum address (account)
Discussion: are the problems solved?
An example
Example: Proof of Work (PoW)
Outline
P2P example 1
Processing
A state machine view of a smart contract
GAS: transaction fee unit
How is a smart contract deployed and executed
CAP
What about multiple winners
Master-Slave
Decentralized applications (DApp, dApp, Dapp, or 
Ethereum based Dapp
Ethereum Virtual Machine
Towards Peer to Peer
Other virtual machines
Ethereum Virtual Machine (EVM) in a node
Ethereum currency units and denominations
Deployment
Discussion: limits of client server
Summary
Different smart contract high level language
Why is it computing intensive?
How to develop and run a smart contract
Discussion
Solidity:  a high-level smart contract language
P2P example 2
New transaction and block
Multi tier: decouple layers/components to
â€¢ In a decentralized scenario
Contract: State variables
Add extra features to the smart contract
Smart contract
Gas cost for a smart contract
Example: cloud loadbalancer
Smart contract deployment
Cont.
Different virtual machines
Unstructured P2P
Create a smart contract
The voting use case
A Peer to Peer (P2P) network is not a physical 
P2P example 3
GAS: fee for normal transaction
