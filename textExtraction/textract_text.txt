DPP 2022 Semester 1, period 2 , 5062COPP6Y
Chapter 4-2: Decentralized Application 
(DApp) and smart contracts
Dr. Zhiming Zhao
Recap
• Distributed and decentralized systems
• Distributed ledgers and challenges
Public key
Address
Transaction
Block
Block chain
Private key
Wallet
double
entry
Account/balance
Consensus (e.g.
PoW)
12/7/22
Blockchain nodes in the network
2
New transaction and block
Different decisions
on transactions
after verification
dd916221d3c7a733cec5ca446c0cb86cf0a3b5b9d1015bb56a1e158558301f54
Inputs                       Value
Outputs                    Value
Input1                     0.6BTC
Input2                     0.8BTC
Output1               1.15 BTC
Output2                0.2. BTC
Total input 1.4 BTC
Inputs-Outputs= 0.05 BTC (transaction fee)
Total output 1.35 BTC
1
1. Submit a new transaction to a node
2. Validate it locally
3. Propagate the transaction to other nodes
4. Peer nodes will validate the transaction
5. Package transactions as block
6. Peer nodes (Miner) run consensus algorithms
7. The first winning peer node announce the new block
4
3
dd916221d3c7a733cec5ca446c0cb86cf0a3b5b9d1015bb56a1e158558301f54
Inputs                       Value
Outputs                    Value
Input1                     0.6BTC
Input2                     0.8BTC
Output1               1.15 BTC
Output2                0.2. BTC
Total input 1.4 BTC
Inputs-Outputs= 0.05 BTC (transaction fee)
Total output 1.35 BTC
2
dd916221d3c7a733cec5ca446c0cb86cf0a3b5b9d1015bb56a1e158558301f54
Inputs                       Value
Outputs                    Value
Input1                     0.6BTC
Input2                     0.8BTC
Output1               1.15 BTC
Output2                0.2. BTC
Total input 1.4 BTC
Inputs-Outputs= 0.05 BTC (transaction fee)
Total output 1.35 BTC
5
Block 2
Signature of
block1 (Hash)
4
7
Block 2
Signature of
block1 (Hash)
dd916221d3c7a733cec5ca446c0cb86cf0a3b5b9d1015bb56a1e158558301f54
Inputs                       Value
Outputs                    Value
Input1                     0.6BTC
Input2                     0.8BTC
Output1               1.15 BTC
Output2                0.2. BTC
Total input 1.4 BTC
Inputs-Outputs= 0.05 BTC (transaction fee)
Total output 1.35 BTC
3
7
Block 2
Signature of
block1 (Hash)
7
Block 2
Signature of
block1 (Hash)
6
7
Block 2
Signature of
block1 (Hash)
Different decisions 
on new blocks
4
5
Block 2
Signature of
block1 (Hash)
3
dd916221d3c7a733cec5ca446c0cb86cf0a3b5b9d1015bb56a1e158558301f54
Inputs                       Value
Outputs                    Value
Input1                     0.6BTC
Input2                     0.8BTC
Output1               1.15 BTC
Output2                0.2. BTC
Total input 1.4 BTC
Inputs-Outputs= 0.05 BTC (transaction fee)
Total output 1.35 BTC
6
Blockchain P2P network
12/7/22
3
Consensus: blockchain nodes make agreement
• Blockchain nodes have to deal with
• different choices of transactions for confirmation,
• different new candidate proposed for the next block
• different state of the new blocks
• Consensus mechanisms are protocols for nodes to synchronize and to make
agreements on transactions and blocks.
• Protocols are included as part of the software that each node should use when joining
• they usually do not change at runtime
• Change of the consensus will be seen as a blockchain evolution, which is normally
a blockchain network
decided by the governance model of the chain
• Typical examples
Importance (PoI) [1]
• Proof of work (PoW), Proof of Stake (PoS), Proof of Authority (PoA), Proof of
[1] A survey of blockchain consensus algorithms performance evaluation criteria https://doi.org/10.1016/j.eswa.2020.113385
CAP
Consistency:
1. Atomic Write operation: write
via a node, and propagate to all,
2. After a write, any client will read
the write results or newer ones
from any nodes.
Partition tolerance:
1. Messages from one part of the
partition may not reach the
other part,
2. System should continue to work
when the network is partitioned.
Write(trans(T1))
Consistency
Ack.
Ack.
Write(trans(T1))
Read(trans(T1))
Partition 
tolerance
Availability
Availability:
1. Any requests received by a non-
failing node must result in a
response,
Armando Fox and Eric Brewer, "Harvest, Yield and Scalable Tolerant Systems", Proc. 7th Workshop Hot Topics in Operating Systems 
(HotOS 99), IEEE CS, 1999, pg. 174–178. doi:10.1109/HOTOS.1999.798396
2. Without guarantee if it contains
the latest write
How does a blockchain cover those aspects?
12/7/22
5
Example: Proof of Work (PoW)
• Purpose: consensus for appending new block to blockchain
• Based on computation (namely Proof of Work)
• Used in Bitcoin and Ethereum blockchains. In Bitcoin blockchain:
• Nodes (miner)
• To look for a “magic number” (called nonce) which will make the hash (SHA256) of the 
combination of SHA256(SHA256(BlockMetaInformation+nonce)) start with a number 
of 0
• The one first finds the nonce will announce to the network. 
12/7/22
6
Why is it computing intensive?
• SHA256 (STRING), a small change in the input STRING can cause a completely 
different output. The length is always 256bits hexadecimal string (64 chars). 
SHA256(SHA256 (“version+ hashPrevBlock + hashMerkleRoot+time+bits+nonce”))=
00…..000xxxxxxxxxxxxxxxxxxxxxxx
X char “0” in the output string
(May change over time)
12/7/22
7
What about multiple winners
• Both winners will 
be appended 
(temporally)
• After 6 blocks, 
the block will be 
finally confirmed
Block n
Block 
n+1
Block 
n+2
Block 
n+3
Block 
n+4
Block 
n+5
Block 
n+6
Block 
(n + 1)’
Block 
(n + 2)’
Block 
(n + 3)’
Block 
(n + 4)’
Discussion
1. Why longer branch gets high chance to be longer and longer?
12/7/22
8
Discussion
• Goto menti.com, code: 84565097
12/7/22
9
DPP 2022 Semester 1, period 2 , 5062COPP6Y
Chapter 4-2: Decentralized Application 
(Dapp) and smart contracts
Dr. Zhiming Zhao
Outline
1. Distributed application
2. Decentralized Application
1.
2. Programming language
3. Development lifecycle
4. Example
3. Discussion
Smart contract and Ethereum Virtual Machine
12/7/22
11
Outline
1. Distributed application
2. Decentralized Application
1.
2. Programming language
3. Development lifecycle
4. Example
3. Discussion
Smart contract and Ethereum Virtual Machine
12/7/22
12
An example
• An online voting example
• Scenario: 
• Have N candidates
• Participants can remotely vote one of the 
candidates via internet
• The system can announce the results after voting
• Requirements:
• The system should be reliable and transparent
12/7/22
The image is from 
www.bbc.com/news
13
Start from a client-server architecture
POST /Candidate
GET /Candidate/{id}
POST /Candidate/Vote/{id}
GET /Candidate/Winner
Server
(voting
service)
Client(s)
• Server: implement the
function of a specific
service, e.g., add/update
candidate, vote, and get
results
• Client: request and get
reply from the server
View candidates
Return list of candidate
Vote a candidate
Get confirmation
Query the voting results
Results
Discussion: What possible problems can we see?
12/7/22
14
Discussion: limits of client server
architectures
• Performance issues, e.g., overloaded server due to big demands
• Single point of failure
• Network connectivity, e.g., a bad connection between the server and
specific regions
• Non-transparent manipulation of the voting results by the service
provider
12/7/22
15
Between Client-Server (two tier)
User interface
User interface
User interface
User interface
User interface
Processing
Processing
Processing
Processing
User interface
User interface
Data
1 Tier
12/7/22
Processing
Processing
Processing
Data
Data
Data
Data
Data
2 Tier
Data
16
Multi tier: decouple layers/components to
different machines
Client(s)
Data base
Server
(voting
service)
View candidates
Return list of candidate
Vote a candidate
Get confirmation
Query the voting results
Results
12/7/22
17
17
Master-Slave
• Master node redistribute
requests to a slave node
Client(s)
Master
(Voting service entrance)
Slave
(voting service)
Slave
(voting service)
Slave
(voting service)
Slave
(voting service)
12/7/22
18
Example: cloud loadbalancer
I
n
t
e
r
f
a
c
e
Service
Service
Service
Service
Service
I
n
t
e
r
f
a
c
e
Load
balancer
Redirect the requests:
- Based on network
traffic
- Based on application
level information
Discussion: are the problems solved?
• Single point of failure
• Performance issues, e.g. overloaded server due to big demands
• Network connectivity, e.g. bad connection between server and specific
regions
• Non-transparent manipulation of the voting results by the service
provider
12/7/22
20
Towards Peer to Peer
• Multi nodes, do not 
rely on a centralized 
manager
• A client can access
different nodes
without being guided
by a centralized point
I
n
t
e
r
f
a
c
e
Service
12/7/22
I
n
t
e
r
f
a
c
e
Service
I
n
t
e
r
f
a
c
e
Service
I
n
t
e
r
f
a
c
e
Service
I
n
t
e
r
f
a
c
e
Service
21
P2P example 1
• Extend client server 
architecture
• Clients can directly interact 
with each other
12/7/22
22
P2P example 1
• Extend client server 
architecture
• Clients can directly interact 
with each other
• Multi servers can be involved
12/7/22
23
P2P example 2
• Completely remove the server
• Peers can directly interact with 
any other peers
12/7/22
24
P2P example 3
• Dynamic servers, 
• servers are connected as a P2P 
way
• Clients can directly interact 
with one of the servers
12/7/22
25
Unstructured P2P
• The topology among peers are random
12/7/22
26
Structured Peer to Peer (P2P) system
• All peers are structured 
in a deterministic 
topology, e.g. a ring, 
binary tree, grid etc.
• Using distributed hash
table (DHT) to identify
peers and to route
traffic
12/7/22
….
A Peer to Peer (P2P) network is not a physical 
network but an overlay
• The relation among peers 
does not imply their topology 
in the underlying physical 
network
• P2P technology is mainly used 
for content distribution and 
sharing
Is Bitcoin blockchain structured or unstructured?
12/7/22
28
Outline
1. Distributed application
2. Decentralized Application
1. Smart contract and Ethereum Virtual Machine
2. Programming language
3. Development lifecycle
4. Example
3. Discussion
12/7/22
29
Decentralized applications (DApp, dApp, Dapp, or 
dapp) 
• A Dapp is a computer application that runs on a distributed computing 
system. DApps have been popularized by distributed ledger technologies 
(DLT) such as the Ethereum Blockchain, where Dapps are often referred to 
as smart contracts. (https://en.wikipedia.org/)
• Dapps are a piece of software that communicates with the blockchain, 
which manages the state of all network actors. 
(https://blockchainhub.net/)
• Dapps are pieces of software that run autonomously on the 
blockchain.(https://cryptotips.eu/)
• A Dapp is an application that runs on a decentralized network and uses its 
resources. (https://blog.chronobank.io/)  
12/7/22
30
Ethereum based Dapp
• Ethereum, introduced by Vitalik Buterin and formally specified by 
GavinWood in 2014, was the first blockchain to support smart 
contracts
• Compared to the ledger only blockchains, e.g., Bitcoin, Ethereum is
often called the second generation of blockchain
12/7/22
31
Smart contract
• In Ethereum, “immutable computer programs that run 
deterministically as part of the Ethereum network protocol”
• Currently, there are more blockchains support smart contracts, e.g., 
Hyperledger Fabric (called chain code)
• Smart contract: “a set of promises, specified in digital form, including 
protocols within which the parties perform on the other 
promises.” [cryptographer Nick Szabo, 1995]
12/7/22
32
Run an application in a decentralized scenario
• In a centralized scenario
• In a decentralized scenario
Code
Binary
Compile
Deploy
Code
Binary
Compile
Deploy
How to run applications on heterogeneous machines?
12/7/22
33
Ethereum Virtual Machine
• The runtime environment for smart contracts (compiled as bytecode) on 
Ethereum:
• Arithmetic and bitwise logic operations
• ADD, MUL, SUB, DIV, MOD, EXP, SHA3…
• Environmental and Block operations
• GAS, ADDRESS, CALLER…
• PUSH, POP, SWAP, …
• Stack, memory, and storage access
• Control flow operations
• System operations
• STOP, JUMP
• Logging, calling, and other operators
12/7/22
34
Other virtual machines
• Java virtual machine (JVM)
• Accepts specific types of compiled code 
(bytecodes)
or MAC)
file systems
• On top of an operating system (e.g., Win, Linux 
• The JVM relies on the underlying OS to provide 
• The JVM provides execution engine to execute 
(interpret) the compiled code. 
Java file
.java
Compiled
.class .jar
Java Virtual 
Machine
Operating 
system
12/7/22
35
Other virtual machines
• Virtual machine in Cloud
Infrastructure as a Service
• Each virtual machine has an
abstraction of the hardware,
and an independent operating
system,
• An application can be executed
in a VM just like in a normal
physical machine
Virtual 
machine
Virtual 
machine
Virtual 
machine
1
n
o
i
t
a
c
i
l
p
p
A
2
n
o
i
t
a
c
i
l
p
p
A
n
n
o
i
t
a
c
i
l
p
p
A
s
e
c
i
v
r
e
s
b
e
W
1
r
e
v
r
e
s
b
e
W
2
r
e
v
r
e
s
b
e
W
1
n
o
i
t
a
c
i
l
p
p
A
2
n
o
i
t
a
c
i
l
p
p
A
n
n
o
i
t
a
c
i
l
p
p
A
s
e
c
i
v
r
e
s
b
e
W
1
r
e
v
r
e
s
b
e
W
2
r
e
v
r
e
s
b
e
W
1
n
o
i
t
a
c
i
l
p
p
A
2
n
o
i
t
a
c
i
l
p
p
A
n
n
o
i
t
a
c
i
l
p
p
A
s
e
c
i
v
r
e
s
b
e
W
1
r
e
v
r
e
s
b
e
W
2
r
e
v
r
e
s
b
e
W
Database, platform (Apache)…
Database, platform (Apache)…
Database, platform (Apache)…
Operating system (Linux, Win, MAC..)
Operating system (Linux, Win, MAC..)
Operating system (Linux, Win, MAC..)
Hypervisor
12/7/22
36
Different virtual machines
• Java virtual machines
• Virtual Box virtual machines
Discussion: Which one is EVM more similar to?
12/7/22
37
Outline
1. Distributed application
2. Decentralized Application
1.
2. Programming language
3. Development lifecycle
4. Example
3. Discussion
Smart contract and Ethereum Virtual Machine
12/7/22
38
Different smart contract high level language
• LLL, a functional programming language ( syntax is similar to Lisp), 
which was the first high-level smart contract language but is rarely 
used today.
• Serpent has a syntax similar to Python. 
• Solidity has a syntax similar to JavaScript, C++, or Java. It is a 
very popular and frequently used language.
• Vyper is similar to Serpent and has a Python-like syntax.
• Bamboo ….
12/7/22
39
Solidity:  a high-level smart contract language
• Short history
• Solidity was created by Dr. Gavin Wood, Aug 2014, and further developed by a 
number of the Ethereum Solidity team
https://github.com/ethereum/solidity
12/7/22
40
A smart contract example
pragma solidity >=0.4.0 <0.6.0; 
contract SimpleStorage {
uint storedData; 
constructor() public {
storedData = 0; 
}
function set(uint x) public { 
storedData = x; 
} 
function get() public view returns (uint) { 
return storedData; 
} 
}
12/7/22
41
A smart contract example
pragma solidity >=0.4.0 <0.6.0; 
contract SimpleStorage {
uint storedData; 
constructor() public {
storedData = 0; 
}
function set(uint x) public { 
storedData = x; 
} 
function get() public view returns (uint) { 
return storedData; 
} 
}
12/7/22
• pragma solidity
• Versions
• Version boundary
>=0.4.0 <0.6.0
• Particular version
^0.4.0
‘;’
•
• A rapidly evolving
language. The 
current version is 
0.8.17.
42
A smart contract example
pragma solidity >=0.4.0 <0.6.0; 
contract SimpleStorage {
uint storedData; 
constructor() public {
storedData = 0; 
}
function set(uint x) public { 
storedData = x; 
} 
function get() public view returns (uint) { 
return storedData; 
} 
}
12/7/22
• Contract body {…}
• Name: SimpleStorage
43
A smart contract example
pragma solidity >=0.4.0 <0.6.0; 
contract SimpleStorage {
uint storedData; 
constructor() public {
}
function set(uint x) public { 
} 
function get() public view returns (uint) { 
} 
return storedData; 
storedData = 0; 
storedData = x; 
}
contract Storage {
storedData = x; 
constructor() public {
}
function set(uint x) public { 
} 
function get() public view returns (uint) { 
} 
return storedData; 
}
12/7/22
• Contract body {…}
• Name: SimpleStorage
• One program may 
contain multi 
contracts
44
A smart contract example
storedData = 0; 
pragma solidity >=0.4.0 <0.6.0; 
contract SimpleStorage {
uint storedData; 
constructor() public {
}
function set(uint x) public { 
} 
function get() public view returns (uint) { 
} 
return storedData; 
storedData = x; 
}
contract Storage is SimpleStorage{
storedData = x; 
constructor() public {
}
function set(uint x) public { 
} 
function get() public view returns (uint) { 
} 
return storedData; 
}
12/7/22
• Contract body {…}
• Name: SimpleStorage
• One program may 
contain multi 
contracts
• One contract can
inherit from another
• contract a is b {…
45
A smart contract example
pragma solidity >=0.4.0 <0.6.0; 
contract SimpleStorage {
uint storedData; 
constructor() public {
storedData = 0; 
}
function set(uint x) public { 
storedData = x; 
} 
function get() public view returns (uint) { 
return storedData; 
} 
}
12/7/22
• Define variables
• Simple data types
• uint
• int (int8, … int256)
• bool
• string
• …..
• Complex data types
• Struct
• mapping
46
A smart contract example
pragma solidity >=0.4.0 <0.6.0; 
contract SimpleStorage {
uint storedData; 
constructor() public {
storedData = 0; 
}
function set(uint x) public { 
storedData = x; 
} 
function get() public view returns (uint) { 
return storedData; 
} 
}
12/7/22
• Variables
• State variable: 
permanently in the 
contract storage 
• Local variable: 
within a function
47
A smart contract example
pragma solidity >=0.4.0 <0.6.0; 
contract SimpleStorage {
uint storedData; 
constructor() public {
storedData = 0; 
}
function set(uint x) public { 
storedData = x; 
} 
function get() public view returns (uint) { 
return storedData; 
} 
}
12/7/22
• Variables
• State variable: 
permanently in the 
contract storage 
• Local variable: 
within a function
• Global variable: 
about the 
blockchain, e.g.
block., or msg.
48
Contract: State variables
Function:
Local variables
Function:
Local variables
Global variables
…
Block 0 (genesis)
Debits
100.00
200.00
3 column ledger accounts example
Credits Balances
100.00
300.00
120.00
160.00
Sales
Sales
Cash
Sales
180.00
40.oo
1
2
3
4
5 …
Block 1
Block 2
Debits
100.00
200.00
3 column ledger accounts example
Credits Balances
100.00
300.00
120.00
160.00
Sales
Sales
Cash
Sales
180.00
40.oo
1
2
3
4
5 …
Debits
100.00
200.00
3 column ledger accounts example
Credits Balances
100.00
300.00
120.00
160.00
Sales
Sales
Cash
Sales
180.00
40.oo
1
2
3
4
5 …
Signature of
block0 (Hash)
Signature of
block1 (Hash)
12/7/22
49
A smart contract example
pragma solidity >=0.4.0 <0.6.0; 
contract SimpleStorage {
uint storedData; 
constructor() public {
storedData = 0; 
}
function set(uint x) public { 
storedData = x; 
} 
function get() public view returns (uint) { 
return storedData; 
} 
}
12/7/22
Constructor (execute once 
after contract is created)
50
A smart contract example
pragma solidity >=0.4.0 <0.6.0; 
contract SimpleStorage {
uint storedData; 
constructor() public {
storedData = 0; 
}
function set(uint x) public { 
storedData = x; 
} 
function get() public view returns (uint) { 
return storedData; 
} 
}
12/7/22
• Scope
• Public: any one can
access
• Internal: current
contract, and the one
derived from it
• Private: only within
the contract
51
A smart contract example
pragma solidity >=0.4.0 <0.6.0; 
contract SimpleStorage {
uint storedData; 
constructor() public {
storedData = 0; 
}
function set1(uint x) public { 
storedData = x; } 
function set2(uint x) private { 
storedData = x;}
function set3(uint x) internal { 
storedData = x;}  
}
contract Storage is SimpleStorage{
function setA(uint x) public { 
function setB(uint x) public { 
function setC(uint x) public { 
set1(x); } 
set2(x); } 
set3(x); } 
12/7/22
}
• Discussion: which 
function can work?
• setA
• setB
• setC
52
A smart contract example
pragma solidity >=0.4.0 <0.6.0; 
contract SimpleStorage {
uint storedData; 
constructor() public {
storedData = 0; 
}
function set1(uint x) public { 
storedData = x; } 
function set2(uint x) private { 
storedData = x;}
function set3(uint x) internal { 
storedData = x;}  
}
contract Storage is SimpleStorage{
function setA(uint x) public { 
function setB(uint x) public { 
function setC(uint x) public { 
set1(x); } 
set2(x); } 
set3(x); } 
12/7/22
}
• Discussion: which 
function can work?
• setA
• setB
• setC
53
Outline
1. Distributed application
2. Decentralized Application
1.
2. Programming language
3. Development lifecycle
4. Example
3. Discussion
Smart contract and Ethereum Virtual Machine
12/7/22
54
How to develop and run a smart contract
• The lifecycle of a smart contract
• Create: create smart contract using a 
high level language, e.g. solidity
• Compile: compile the code into the EVM 
assemble code
• Deploy: deploy the code to the Ethereum
• Use: Dapp can invoke the smart contract
• Destroy: a smart contract can be 
destroyed, - selfdestruct
Create
Destroy
Compile
Use
Deploy
12/7/22
55
Tools for smart contract development
• Truffle
• Remix
• Compile solidity, deploy, test
• Interact with the different Ethereum chains
• Online integrated development environment
• Emulated Ethereum virtual machine
• Ganache: for a private test blockchain
• MetaMask: a wallet for interact with the blockchain
12/7/22
56
Deployment
• The compiled smart contract will be deployed on the blockchain
• By calling a special smart contract
• The blockchain will return a unique address for accessing the smart 
contract
12/7/22
57
A state machine view of a smart contract
• State of a smart contract (value of those state variables) can be
changed by calling its function via transactions,
State 0
{v1,v2,…}
State 1
{v1,v2,…}
State 2
{v1,v2,…}
deploy
ment
f1, f2, f3..
init
f1
f2
How is a smart contract deployed and executed
1.
2.
3.
4.
5.
A user with Externally owned account (EOA) to send smart contract deployment request to the build
in smart contract
A special build-in smart contract will then execute the smart contract to initialize it
A contract account is created for the smart contract. The smart contract code and the value will be
stored as state on blockchain.
Both transactions (deployment and initialization) will be stored on a blockchain.
If the state of a smart contract has been changed after an invocation; the new state and the
invocation will be stored on the blockchain as a transaction.
Each deployment:
two transactions
deploy
ment
init
SC:f1,
f2...(S0)
f1
SC: f1->
S1{V1..Vn}
f2
SC: f2->
S2{V1..Vn}
Block 
n
Block 
(n+1)
12/7/22
Block 
(n + 2)
Block 
(n + 3)
Block 
(n + 4)
Block 
(n + 5)
Ethereum address (account)
• externally owned accounts (EOAs) 
• Like the Bitcoin address
• Perform cryptocurrency transactions
• Usually owned by a person
• contract accounts
• Owned by a smart contract
• You can send transaction to the smart contract address to invoke the
function
• However, smart contract cannot actively execute the function
12/7/22
60
Smart contract deployment
• The deployment operation is to send a contract creation transaction
to the Ethereum network
• Transactions are verified and stored in a block in the blockchain
• The smart contract address IS NOT generated based on private/public
key like those External Owned Addresses
• A smart contract address is generated by the contract creation
transaction; it is owned by the smart contract. It can receive funds, 
send transactions etc. 
12/7/22
61
A state machine view of a smart contract
• Can we delete a smart contract?
• Via selfdestruct(addr) operation; addr is the address of the contract
Each deployment:
two transactions
deploy
ment
init
SC:f1,
f2...(S0)
f1
SC: f1->
S1{V1..Vn}
f2
SC: f2->
S2{V1..Vn}
selfdestruct
SC: self-
destruct ->{}
Block 
n
Block 
(n+1)
12/7/22
Block 
(n + 2)
Block 
(n + 3)
Block 
(n + 4)
Block 
(n + 5)
Block 
(n + 6)
Block 
(n + 7)
Can we still invoke the smart contract after self-destruct?
Deployment
• The state of the smart contract will be initialized
• It is not a free operation. Why?
• Because of the cost for consensus and the storage
• The state of the smart contract is changed by initialization
A full node
Ethereum Virtual
Machine
State of the
blockchain
Transaction mem-
pool
12/7/22
63
Ethereum Virtual Machine (EVM) in a node
• It is a quasi–Turing-complete state machine (Ethereum yellow paper)
• It is a Turing complete state machine
• But the total computation is bounded to the “gas” (fee) that the smart contract 
is allowed to consume
Gas is the fuel of Ethereum; it is NOT Ether, but a separated virtual currency and
has its own exchange rate against Ether.
12/7/22
64
GAS: transaction fee unit
• How to compute the miner fee
• Transaction fee=gas cost units * gas price (per unit)
• Gas limit: the maximal gas unit you are willing to
to pay
• The gas cost is the actual cost charged by the
miner.
12/7/22
65
Ethereum currency units and denominations
SI name
Value (in wei)
Wei
1
1,000
Kilowei or femtoether
Megawei or picoether
1,000,000
1,000,000,000
Gigawei or nanoether
Microether or micro
1,000,000,000,000
Milliether or milli
1,000,000,000,000,000
Ether (about 500 Euro,
checked 3/Dec/2020)
Kiloether
Exponent Common name
1
103
106
109
1012
1015
wei
Babbage
Lovelace
Shannon
Szabo
Finney
1,000,000,000,000,000,000
1,000,000,000,000,000,000,000
Ether
Grand
1018
1021
1,000,000,000,000,000,000,000,000
1024
Megaether
12/7/22
66
GAS: fee for normal transaction
• If actual cost is smaller than the gas limit, the
remaining gas will be refunded
• refund Ether= (gas limit- gas cost)* gas price
• If the gas limit is smaller than the actual gas cost.
The execution will be halt immediately, and throw 
a “out of gas” exception
• All changes will be rolled back
• But the sender will be charged
12/7/22
67
Gas cost for a smart contract
• The transaction cost is easy to estimate, but its precise cost is difficult
to know in advance
• computation in the smart contract may depend on the runtime condition, e.g.,
in the loop etc.
Discussion: why?
12/7/22
68
Cost of a smart contract
• The Ethereum yellow paper defines cost model for different operation
• Complex/heavy smart contract operations have high cost
Discussion: can a well written smart contract save gas?
12/7/22
69
Outline
1. Distributed application
2. Decentralized Application
1.
2. Programming language
3. Development lifecycle
4. Example
3. Discussion
Smart contract and Ethereum Virtual Machine
12/7/22
70
The voting use case
• Scenario: 
• Have N candidates
• Participants can remotely vote one of the 
candidates via internet
• The system can announce the results after voting
• Requirements:
• The system should be reliable and transparent
12/7/22
The image is from 
www.bbc.com/news
71
Create a smart contract
• State of the voting smart contract
12/7/22
72
Create a smart contract
• State of the voting smart contract
• Candidate information
• Votes of the candidate
• …
12/7/22
73
Smart contract
• Using Solidity
• Define the data structure for a 
candidate
• And state of the candidate
• A constructor function to 
initialize the state
pragma solidity > 0.4.4;
/* Define the smart contract Voting*/
contract Voting {
/*
Define a data structure called candidate
*/
struct candidate {
/*Name of the candidate*/
string name;
/*Count the voting results of the candidate*/
uint votes;
}
/* The list of all candidates. The example we only accepts 
three candidates*/
candidate[3] candidatelist;
/*The constructor function of the contract*/
constructor()
/*Initialize three candidates; their names, addresses and 
public
{
votes*/
} ….
12/7/22
74
Create a smart contract
• Operation of the voting smart contract
12/7/22
75
Create a smart contract
• Operation of the voting smart contract
• Obtain details of a candidate
• Vote a candidate
• Check the output (depends on the rule)
12/7/22
76
Cont.
• getCandidate
• voteCandidate
• getVoteResult
pragma solidity > 0.4.4;
/* Define the smart contract Voting*/
contract Voting {
…..
function getCandidate(uint id)
public
view
returns(string memory)
{… }
/* Vote a specific candidate*/
function voteCandidate(uint id)
public
{
}
if (id<candidatelist.length) {
candidatelist[id].votes+=1;
}
/* Get the voting results of a specific candidate*/
function getVoteResults(uint id)
public
view
returns(uint)
12/7/22
{ if (id<candidatelist.length) return candidatelist[id].votes;
}
77
Using Remix to edit and test the contract
• https://remix.ethereum.org/
• Compile
• Deploy
• Test
• But this is not real 
blockchain; it is an emulated 
environment
12/7/22
78
Remix
12/7/22
79
Add extra features to the smart contract
• Avoid double voting
• Set constraints for voting
12/7/22
80
Discussion
• Menti.com
• Code 73576389
12/7/22
81
Summary
• Lab assignment
• Read more from the online book:
• https://github.com/ethereumbook/ethereumbook
12/7/22
82
