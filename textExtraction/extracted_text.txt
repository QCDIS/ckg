























Chapter 4-2: Decentralized Application 
(DApp) and smart contracts

Dr. Zhiming Zhao

DPP 2022 Semester 1, period 2 , 5062COPP6Y


Recap
• Distributed and decentralized systems
• Distributed ledgers and challenges

12/7/22 2

Address Transaction Block Block chainPublic key

Private key

Wallet

double
entry Account/balance Consensus (e.g.

PoW)

Blockchain nodes in the network


New transaction and block

12/7/22 3

Inputs                       Value

Input1                     0.6BTC
Input2                     0.8BTC

Outputs                    Value

Output1               1.15 BTC
Output2                0.2. BTC

Total input 1.4 BTC Total output 1.35 BTC
Inputs-Outputs= 0.05 BTC (transaction fee)

dd916221d3c7a733cec5ca446c0cb86cf0a3b5b9d1015bb56a1e158558301f54

1
2

3

Inputs                       Value

Input1                     0.6BTC
Input2                     0.8BTC

Outputs                    Value

Output1               1.15 BTC
Output2                0.2. BTC

Total input 1.4 BTC Total output 1.35 BTC
Inputs-Outputs= 0.05 BTC (transaction fee)

dd916221d3c7a733cec5ca446c0cb86cf0a3b5b9d1015bb56a1e158558301f54

3

3 Inputs                       Value

Input1                     0.6BTC
Input2                     0.8BTC

Outputs                    Value

Output1               1.15 BTC
Output2                0.2. BTC

Total input 1.4 BTC Total output 1.35 BTC
Inputs-Outputs= 0.05 BTC (transaction fee)

dd916221d3c7a733cec5ca446c0cb86cf0a3b5b9d1015bb56a1e158558301f54

Inputs                       Value

Input1                     0.6BTC
Input2                     0.8BTC

Outputs                    Value

Output1               1.15 BTC
Output2                0.2. BTC

Total input 1.4 BTC Total output 1.35 BTC
Inputs-Outputs= 0.05 BTC (transaction fee)

dd916221d3c7a733cec5ca446c0cb86cf0a3b5b9d1015bb56a1e158558301f54

Block 2

Signature of
block1 (Hash)

Block 2

Signature of
block1 (Hash)

5

5

4

4

6

6

7

7

7

7

Blockchain P2P network

Inputs                       Value

Input1                     0.6BTC
Input2                     0.8BTC

Outputs                    Value

Output1               1.15 BTC
Output2                0.2. BTC

Total input 1.4 BTC Total output 1.35 BTC
Inputs-Outputs= 0.05 BTC (transaction fee)

dd916221d3c7a733cec5ca446c0cb86cf0a3b5b9d1015bb56a1e158558301f54

4

Block 2

Signature of
block1 (Hash)

Block 2

Signature of
block1 (Hash)

Block 2

Signature of
block1 (Hash)

Block 2

Signature of
block1 (Hash)

1. Submit a new transaction to a node
2. Validate it locally
3. Propagate the transaction to other nodes
4. Peer nodes will validate the transaction
5. Package transactions as block
6. Peer nodes (Miner) run consensus algorithms
7. The first winning peer node announce the new block

Different decisions
on transactions

after verification

Different decisions 
on new blocks


Consensus: blockchain nodes make agreement
• Blockchain nodes have to deal with
• different choices of transactions for confirmation,
• different new candidate proposed for the next block
• different state of the new blocks

• Consensus mechanisms are protocols for nodes to synchronize and to make
agreements on transactions and blocks.
• Protocols are included as part of the software that each node should use when joining

a blockchain network
• they usually do not change at runtime
• Change of the consensus will be seen as a blockchain evolution, which is normally

decided by the governance model of the chain
• Typical examples
• Proof of work (PoW), Proof of Stake (PoS), Proof of Authority (PoA), Proof of

Importance (PoI) [1]

[1] A survey of blockchain consensus algorithms performance evaluation criteria https://doi.org/10.1016/j.eswa.2020.113385

https://doi.org/10.1016/j.eswa.2020.113385


CAP

12/7/22 5

Write(trans(T1)) Read(trans(T1))

Write(trans(T1))
Consistency:
1. Atomic Write operation: write

via a node, and propagate to all,
2. After a write, any client will read

the write results or newer ones
from any nodes.

Ack.

Ack.

Availability:
1. Any requests received by a non-

failing node must result in a
response,

2. Without guarantee if it contains
the latest write

Partition tolerance:
1. Messages from one part of the

partition may not reach the
other part,

2. System should continue to work
when the network is partitioned.Consistency

Availability Partition 
tolerance

Armando Fox and Eric Brewer, "Harvest, Yield and Scalable Tolerant Systems", Proc. 7th Workshop Hot Topics in Operating Systems 
(HotOS 99), IEEE CS, 1999, pg. 174–178. doi:10.1109/HOTOS.1999.798396

How does a blockchain cover those aspects?

https://en.wikipedia.org/wiki/Doi_(identifier)
https://doi.org/10.1109%2FHOTOS.1999.798396


Example: Proof of Work (PoW)
• Purpose: consensus for appending new block to blockchain
• Based on computation (namely Proof of Work)
• Used in Bitcoin and Ethereum blockchains. In Bitcoin blockchain:
• Nodes (miner)
• To look for a “magic number” (called nonce) which will make the hash (SHA256) of the 

combination of SHA256(SHA256(BlockMetaInformation+nonce)) start with a number 
of 0

• The one first finds the nonce will announce to the network. 

12/7/22 6


Why is it computing intensive?

• SHA256 (STRING), a small change in the input STRING can cause a completely 
different output. The length is always 256bits hexadecimal string (64 chars). 

12/7/22 7

SHA256(SHA256 (“version+ hashPrevBlock + hashMerkleRoot+time+bits+nonce”))=
00…..000xxxxxxxxxxxxxxxxxxxxxxx

X char “0” in the output string
(May change over time)


What about multiple winners

• Both winners will 
be appended 
(temporally)
• After 6 blocks, 

the block will be 
finally confirmed

12/7/22 8

Block n

Block 
n+1

Block 
(n + 1)’

Block 
n+2

Block 
(n + 2)’

Block 
(n + 3)’

Block 
(n + 4)’

Block 
n+3

Block 
n+4

Block 
n+5

Block 
n+6

Discussion
1. Why longer branch gets high chance to be longer and longer?


Discussion

• Goto menti.com, code: 84565097

12/7/22 9


Chapter 4-2: Decentralized Application 
(Dapp) and smart contracts

Dr. Zhiming Zhao

DPP 2022 Semester 1, period 2 , 5062COPP6Y


Outline

1. Distributed application
2. Decentralized Application

1. Smart contract and Ethereum Virtual Machine
2. Programming language
3. Development lifecycle
4. Example

3. Discussion

12/7/22 11


Outline

1. Distributed application
2. Decentralized Application

1. Smart contract and Ethereum Virtual Machine
2. Programming language
3. Development lifecycle
4. Example

3. Discussion

12/7/22 12


An example

• An online voting example
• Scenario: 
• Have N candidates
• Participants can remotely vote one of the 

candidates via internet
• The system can announce the results after voting

• Requirements:
• The system should be reliable and transparent

12/7/22 13

The image is from 
www.bbc.com/news


Start from a client-server architecture

• Server: implement the
function of a specific
service, e.g., add/update
candidate, vote, and get
results
• Client: request and get

reply from the server

12/7/22 14

Client(s)
Server
(voting
service)

View candidates

Return list of candidate

Vote a candidate

Get confirmation

Query the voting results

Results

POST /Candidate
GET /Candidate/{id}
POST /Candidate/Vote/{id}
GET /Candidate/Winner

Discussion: What possible problems can we see?


Discussion: limits of client server
architectures
• Performance issues, e.g., overloaded server due to big demands
• Single point of failure
• Network connectivity, e.g., a bad connection between the server and

specific regions
• Non-transparent manipulation of the voting results by the service

provider

12/7/22 15


Processing

Between Client-Server (two tier)

12/7/22 16

User interface

Data

User interface

Processing

Data

Processing

User interface

Data

Processing

Data

Data

Data

User interface

Processing

User interface

Processing

User interface

Processing

Data

User interface

1 Tier 2 Tier


Multi tier: decouple layers/components to
different machines

12/7/22 17

Client(s)
Server
(voting
service)

Data base

17

View candidates

Return list of candidate

Vote a candidate

Get confirmation

Query the voting results

Results


Master-Slave

• Master node redistribute
requests to a slave node

12/7/22 18

Master
(Voting service entrance)

Slave
(voting service)

Slave
(voting service)

Slave
(voting service)

Slave
(voting service)

Client(s)


Example: cloud loadbalancer

Service
Load

balancer

Interface

Service

Service

Service

Service

Interface

Redirect the requests:
- Based on network

traffic
- Based on application

level information


Discussion: are the problems solved?

• Single point of failure
• Performance issues, e.g. overloaded server due to big demands
• Network connectivity, e.g. bad connection between server and specific

regions
• Non-transparent manipulation of the voting results by the service

provider

12/7/22 20


Towards Peer to Peer

• Multi nodes, do not 
rely on a centralized 
manager
• A client can access

different nodes
without being guided
by a centralized point

12/7/22 21

Service

Interface

Service

Interface

Service

Interface

Service

Interface

Service

Interface


P2P example 1

• Extend client server 
architecture
• Clients can directly interact 

with each other

12/7/22 22


P2P example 1

• Extend client server 
architecture
• Clients can directly interact 

with each other
• Multi servers can be involved

12/7/22 23


P2P example 2

• Completely remove the server
• Peers can directly interact with 

any other peers

12/7/22 24


P2P example 3

• Dynamic servers, 
• servers are connected as a P2P 

way
• Clients can directly interact 

with one of the servers

12/7/22 25


Unstructured P2P

• The topology among peers are random

12/7/22 26


Structured Peer to Peer (P2P) system

• All peers are structured 
in a deterministic 
topology, e.g. a ring, 
binary tree, grid etc.
• Using distributed hash

table (DHT) to identify
peers and to route
traffic

12/7/22

….


A Peer to Peer (P2P) network is not a physical 
network but an overlay

• The relation among peers 
does not imply their topology 
in the underlying physical 
network
• P2P technology is mainly used 

for content distribution and 
sharing

12/7/22 28Is Bitcoin blockchain structured or unstructured?


Outline

1. Distributed application
2. Decentralized Application

1. Smart contract and Ethereum Virtual Machine
2. Programming language
3. Development lifecycle
4. Example

3. Discussion

12/7/22 29


Decentralized applications (DApp, dApp, Dapp, or 
dapp) 
• A Dapp is a computer application that runs on a distributed computing 

system. DApps have been popularized by distributed ledger technologies 
(DLT) such as the Ethereum Blockchain, where Dapps are often referred to 
as smart contracts. (https://en.wikipedia.org/)
• Dapps are a piece of software that communicates with the blockchain, 

which manages the state of all network actors. 
(https://blockchainhub.net/)
• Dapps are pieces of software that run autonomously on the 

blockchain.(https://cryptotips.eu/)
• A Dapp is an application that runs on a decentralized network and uses its 

resources. (https://blog.chronobank.io/)  

12/7/22 30

https://en.wikipedia.org/
https://blockchainhub.net/
https://cryptotips.eu/
https://blog.chronobank.io/


Ethereum based Dapp

• Ethereum, introduced by Vitalik Buterin and formally specified by 
GavinWood in 2014, was the first blockchain to support smart 
contracts
• Compared to the ledger only blockchains, e.g., Bitcoin, Ethereum is

often called the second generation of blockchain

12/7/22 31


Smart contract

• In Ethereum, “immutable computer programs that run 
deterministically as part of the Ethereum network protocol”
• Currently, there are more blockchains support smart contracts, e.g., 

Hyperledger Fabric (called chain code)
• Smart contract: “a set of promises, specified in digital form, including 

protocols within which the parties perform on the other 
promises.” [cryptographer Nick Szabo, 1995]

12/7/22 32


• In a decentralized scenario

Run an application in a decentralized scenario

• In a centralized scenario

12/7/22 33

Code

Binary

Compile

Deploy

Code

Binary
Compile

Deploy

How to run applications on heterogeneous machines?


Ethereum Virtual Machine

• The runtime environment for smart contracts (compiled as bytecode) on 
Ethereum:
• Arithmetic and bitwise logic operations

• ADD, MUL, SUB, DIV, MOD, EXP, SHA3…
• Environmental and Block operations

• GAS, ADDRESS, CALLER…
• Stack, memory, and storage access

• PUSH, POP, SWAP, …
• Control flow operations

• STOP, JUMP
• System operations

• Logging, calling, and other operators

12/7/22 34


Other virtual machines

• Java virtual machine (JVM)
• Accepts specific types of compiled code 

(bytecodes)
• On top of an operating system (e.g., Win, Linux 

or MAC)
• The JVM relies on the underlying OS to provide 

file systems
• The JVM provides execution engine to execute 

(interpret) the compiled code. 

12/7/22 35

Java file
.java

Compiled
.class .jar

Java Virtual 
Machine

Operating 
system


Other virtual machines

• Virtual machine in Cloud
Infrastructure as a Service
• Each virtual machine has an

abstraction of the hardware,
and an independent operating
system,
• An application can be executed

in a VM just like in a normal
physical machine

12/7/22 36

Operating system (Linux, Win, MAC..)

Database, platform (Apache)…

Ap
pl
ica

tio
n
1

Ap
pl
ica

tio
n
2

W
eb

se
rv
er

1

W
eb

se
rv
ice

s

Ap
pl
ica

tio
n
n

W
eb

se
rv
er

2

Operating system (Linux, Win, MAC..)

Database, platform (Apache)…

Ap
pl
ica

tio
n
1

Ap
pl
ica

tio
n
2

W
eb

se
rv
er

1

W
eb

se
rv
ice

s

Ap
pl
ica

tio
n
n

W
eb

se
rv
er

2

Operating system (Linux, Win, MAC..)

Database, platform (Apache)…

Ap
pl
ica

tio
n
1

Ap
pl
ica

tio
n
2

W
eb

se
rv
er

1

W
eb

se
rv
ice

s

Ap
pl
ica

tio
n
n

W
eb

se
rv
er

2

Virtual 
machine

Virtual 
machine

Virtual 
machine

Hypervisor


Different virtual machines

• Java virtual machines
• Virtual Box virtual machines

12/7/22 37Discussion: Which one is EVM more similar to?


Outline

1. Distributed application
2. Decentralized Application

1. Smart contract and Ethereum Virtual Machine
2. Programming language
3. Development lifecycle
4. Example

3. Discussion

12/7/22 38


Different smart contract high level language

• LLL, a functional programming language ( syntax is similar to Lisp), 
which was the first high-level smart contract language but is rarely 
used today.
• Serpent has a syntax similar to Python. 
• Solidity has a syntax similar to JavaScript, C++, or Java. It is a 

very popular and frequently used language.
• Vyper is similar to Serpent and has a Python-like syntax.
• Bamboo ….

12/7/22 39


Solidity:  a high-level smart contract language

• Short history
• Solidity was created by Dr. Gavin Wood, Aug 2014, and further developed by a 

number of the Ethereum Solidity team

12/7/22 40

https://github.com/ethereum/solidity


A smart contract example

12/7/22 41

pragma solidity >=0.4.0 <0.6.0; 
contract SimpleStorage {

uint storedData; 
constructor() public {

storedData = 0; 
}
function set(uint x) public { 

storedData = x; 
} 
function get() public view returns (uint) { 

return storedData; 
} 

}


A smart contract example

12/7/22 42

pragma solidity >=0.4.0 <0.6.0; 
contract SimpleStorage {

uint storedData; 
constructor() public {

storedData = 0; 
}
function set(uint x) public { 

storedData = x; 
} 
function get() public view returns (uint) { 

return storedData; 
} 

}

• pragma solidity
• Versions
• Version boundary

>=0.4.0 <0.6.0
• Particular version

^0.4.0
• ‘;’
• A rapidly evolving

language. The 
current version is 
0.8.17.


A smart contract example

12/7/22 43

pragma solidity >=0.4.0 <0.6.0; 
contract SimpleStorage {

uint storedData; 
constructor() public {

storedData = 0; 
}
function set(uint x) public { 

storedData = x; 
} 
function get() public view returns (uint) { 

return storedData; 
} 

}

• Contract body {…}
• Name: SimpleStorage


A smart contract example

12/7/22 44

pragma solidity >=0.4.0 <0.6.0; 
contract SimpleStorage {

uint storedData; 
constructor() public {

storedData = 0; 
}
function set(uint x) public { 

storedData = x; 
} 
function get() public view returns (uint) { 

return storedData; 
} 

}
contract Storage {

constructor() public {
}
function set(uint x) public { 

storedData = x; 
} 
function get() public view returns (uint) { 

return storedData; 
} 

}

• Contract body {…}
• Name: SimpleStorage
• One program may 

contain multi 
contracts


A smart contract example

12/7/22 45

pragma solidity >=0.4.0 <0.6.0; 
contract SimpleStorage {

uint storedData; 
constructor() public {

storedData = 0; 
}
function set(uint x) public { 

storedData = x; 
} 
function get() public view returns (uint) { 

return storedData; 
} 

}

contract Storage is SimpleStorage{
constructor() public {
}
function set(uint x) public { 

storedData = x; 
} 
function get() public view returns (uint) { 

return storedData; 
} 

}

• Contract body {…}
• Name: SimpleStorage
• One program may 

contain multi 
contracts

• One contract can
inherit from another
• contract a is b {…


A smart contract example

12/7/22 46

pragma solidity >=0.4.0 <0.6.0; 
contract SimpleStorage {

uint storedData; 
constructor() public {

storedData = 0; 
}
function set(uint x) public { 

storedData = x; 
} 
function get() public view returns (uint) { 

return storedData; 
} 

}

• Define variables
• Simple data types
• uint
• int (int8, … int256)
• bool
• string
• …..

• Complex data types
• Struct
• mapping


A smart contract example

12/7/22 47

pragma solidity >=0.4.0 <0.6.0; 
contract SimpleStorage {

uint storedData; 
constructor() public {

storedData = 0; 
}
function set(uint x) public { 

storedData = x; 
} 
function get() public view returns (uint) { 

return storedData; 
} 

}

• Variables
• State variable: 

permanently in the 
contract storage 

• Local variable: 
within a function


A smart contract example

12/7/22 48

pragma solidity >=0.4.0 <0.6.0; 
contract SimpleStorage {

uint storedData; 
constructor() public {

storedData = 0; 
}
function set(uint x) public { 

storedData = x; 
} 
function get() public view returns (uint) { 

return storedData; 
} 

}

• Variables
• State variable: 

permanently in the 
contract storage 

• Local variable: 
within a function

• Global variable: 
about the 
blockchain, e.g.
block., or msg.


Contract: State variables

12/7/22 49

Function:
Local variables

Function:
Local variables

Block 2

Signature of
block1 (Hash)

Block 0 (genesis) Block 1

Signature of
block0 (Hash)

3 column ledger accounts example
Debits Credits Balances

1 Sales 100.00 100.00
2 Sales 200.00 300.00
3 Cash 180.00 120.00
4 Sales 40.oo 160.00
5 …

3 column ledger accounts example
Debits Credits Balances

1 Sales 100.00 100.00
2 Sales 200.00 300.00
3 Cash 180.00 120.00
4 Sales 40.oo 160.00
5 …

3 column ledger accounts example
Debits Credits Balances

1 Sales 100.00 100.00
2 Sales 200.00 300.00
3 Cash 180.00 120.00
4 Sales 40.oo 160.00
5 …

Global variables

…


A smart contract example

12/7/22 50

pragma solidity >=0.4.0 <0.6.0; 
contract SimpleStorage {

uint storedData; 
constructor() public {

storedData = 0; 
}
function set(uint x) public { 

storedData = x; 
} 
function get() public view returns (uint) { 

return storedData; 
} 

}

Constructor (execute once 
after contract is created)


A smart contract example

12/7/22 51

pragma solidity >=0.4.0 <0.6.0; 
contract SimpleStorage {

uint storedData; 
constructor() public {

storedData = 0; 
}
function set(uint x) public { 

storedData = x; 
} 
function get() public view returns (uint) { 

return storedData; 
} 

}

• Scope
• Public: any one can

access
• Internal: current

contract, and the one
derived from it

• Private: only within
the contract


A smart contract example

12/7/22 52

pragma solidity >=0.4.0 <0.6.0; 
contract SimpleStorage {

uint storedData; 
constructor() public {

storedData = 0; 
}

function set1(uint x) public { 
storedData = x; } 

function set2(uint x) private { 
storedData = x;}

function set3(uint x) internal { 
storedData = x;}  

}

contract Storage is SimpleStorage{
function setA(uint x) public { 

set1(x); } 
function setB(uint x) public { 

set2(x); } 
function setC(uint x) public { 

set3(x); } 
}

• Discussion: which 
function can work?
• setA
• setB
• setC


A smart contract example

12/7/22 53

pragma solidity >=0.4.0 <0.6.0; 
contract SimpleStorage {

uint storedData; 
constructor() public {

storedData = 0; 
}

function set1(uint x) public { 
storedData = x; } 

function set2(uint x) private { 
storedData = x;}

function set3(uint x) internal { 
storedData = x;}  

}

contract Storage is SimpleStorage{
function setA(uint x) public { 

set1(x); } 
function setB(uint x) public { 

set2(x); } 
function setC(uint x) public { 

set3(x); } 
}

• Discussion: which 
function can work?
• setA
• setB
• setC


Outline

1. Distributed application
2. Decentralized Application

1. Smart contract and Ethereum Virtual Machine
2. Programming language
3. Development lifecycle
4. Example

3. Discussion

12/7/22 54


How to develop and run a smart contract

• The lifecycle of a smart contract
• Create: create smart contract using a 

high level language, e.g. solidity
• Compile: compile the code into the EVM 

assemble code
• Deploy: deploy the code to the Ethereum
• Use: Dapp can invoke the smart contract
• Destroy: a smart contract can be 

destroyed, - selfdestruct

12/7/22 55

Create

Compile

DeployUse

Destroy


Tools for smart contract development

• Truffle
• Compile solidity, deploy, test
• Interact with the different Ethereum chains

• Remix
• Online integrated development environment
• Emulated Ethereum virtual machine

• Ganache: for a private test blockchain
• MetaMask: a wallet for interact with the blockchain

12/7/22 56


Deployment

• The compiled smart contract will be deployed on the blockchain
• By calling a special smart contract

• The blockchain will return a unique address for accessing the smart 
contract

12/7/22 57


A state machine view of a smart contract
• State of a smart contract (value of those state variables) can be

changed by calling its function via transactions,

State 0
{v1,v2,…}

State 1
{v1,v2,…}

State 2
{v1,v2,…}

f1 f2

deploy
ment

f1, f2, f3..

init


How is a smart contract deployed and executed
1. A user with Externally owned account (EOA) to send smart contract deployment request to the build

in smart contract
2. A special build-in smart contract will then execute the smart contract to initialize it
3. A contract account is created for the smart contract. The smart contract code and the value will be

stored as state on blockchain.
4. Both transactions (deployment and initialization) will be stored on a blockchain.
5. If the state of a smart contract has been changed after an invocation; the new state and the

invocation will be stored on the blockchain as a transaction.

12/7/22
Block 
(n + 2)

Block 
(n + 3)

Block 
(n + 4)

Block 
(n + 5)

Block 
(n+1)

Each deployment:
two transactions

SC: f1->
S1{V1..Vn}

f1

deploy
ment

SC:f1,
f2...(S0)init

SC: f2->
S2{V1..Vn}

f2

Block 
n


Ethereum address (account)

• externally owned accounts (EOAs) 
• Like the Bitcoin address
• Perform cryptocurrency transactions
• Usually owned by a person

• contract accounts
• Owned by a smart contract
• You can send transaction to the smart contract address to invoke the

function
• However, smart contract cannot actively execute the function

12/7/22 60


Smart contract deployment

• The deployment operation is to send a contract creation transaction
to the Ethereum network
• Transactions are verified and stored in a block in the blockchain
• The smart contract address IS NOT generated based on private/public

key like those External Owned Addresses
• A smart contract address is generated by the contract creation
transaction; it is owned by the smart contract. It can receive funds, 
send transactions etc. 

12/7/22 61


A state machine view of a smart contract
• Can we delete a smart contract?
• Via selfdestruct(addr) operation; addr is the address of the contract

12/7/22
Block 
(n + 2)

Block 
(n + 3)

Block 
(n + 4)

Block 
(n + 5)

Block 
(n+1)

Each deployment:
two transactions

SC: f1->
S1{V1..Vn}

f1

deploy
ment

SC:f1,
f2...(S0)init

SC: f2->
S2{V1..Vn}

f2

Block 
n

selfdestruct SC: self-
destruct ->{}

Block 
(n + 6)

Block 
(n + 7)

Can we still invoke the smart contract after self-destruct?


Deployment
• The state of the smart contract will be initialized
• It is not a free operation. Why?
• Because of the cost for consensus and the storage
• The state of the smart contract is changed by initialization

12/7/22 63

A full node
Ethereum Virtual

Machine

State of the
blockchain

Transaction mem-
pool


Ethereum Virtual Machine (EVM) in a node

• It is a quasi–Turing-complete state machine (Ethereum yellow paper)
• It is a Turing complete state machine
• But the total computation is bounded to the “gas” (fee) that the smart contract 

is allowed to consume

12/7/22 64

Gas is the fuel of Ethereum; it is NOT Ether, but a separated virtual currency and
has its own exchange rate against Ether.


GAS: transaction fee unit
• How to compute the miner fee
• Transaction fee=gas cost units * gas price (per unit)

• Gas limit: the maximal gas unit you are willing to
to pay
• The gas cost is the actual cost charged by the

miner.

12/7/22 65


Ethereum currency units and denominations

12/7/22 66

Value (in wei) Exponent Common name SI name
1 1 wei Wei
1,000 103 Babbage Kilowei or femtoether

1,000,000 106 Lovelace Megawei or picoether

1,000,000,000 109 Shannon Gigawei or nanoether

1,000,000,000,000 1012 Szabo Microether or micro

1,000,000,000,000,000 1015 Finney Milliether or milli

1,000,000,000,000,000,000 1018 Ether Ether (about 500 Euro,
checked 3/Dec/2020)

1,000,000,000,000,000,000,000 1021 Grand Kiloether

1,000,000,000,000,000,000,000,000 1024 Megaether


GAS: fee for normal transaction
• If actual cost is smaller than the gas limit, the

remaining gas will be refunded
• refund Ether= (gas limit- gas cost)* gas price

• If the gas limit is smaller than the actual gas cost.
The execution will be halt immediately, and throw 
a “out of gas” exception
• All changes will be rolled back
• But the sender will be charged

12/7/22 67


Gas cost for a smart contract

• The transaction cost is easy to estimate, but its precise cost is difficult
to know in advance
• computation in the smart contract may depend on the runtime condition, e.g.,

in the loop etc.

12/7/22 68Discussion: why?


Cost of a smart contract
• The Ethereum yellow paper defines cost model for different operation
• Complex/heavy smart contract operations have high cost

12/7/22 69Discussion: can a well written smart contract save gas?


Outline

1. Distributed application
2. Decentralized Application

1. Smart contract and Ethereum Virtual Machine
2. Programming language
3. Development lifecycle
4. Example

3. Discussion

12/7/22 70


The voting use case

• Scenario: 
• Have N candidates
• Participants can remotely vote one of the 

candidates via internet
• The system can announce the results after voting

• Requirements:
• The system should be reliable and transparent

12/7/22 71

The image is from 
www.bbc.com/news


Create a smart contract

• State of the voting smart contract

12/7/22 72


Create a smart contract

• State of the voting smart contract
• Candidate information
• Votes of the candidate
• …

12/7/22 73


Smart contract

• Using Solidity
• Define the data structure for a 

candidate
• And state of the candidate
• A constructor function to 

initialize the state

12/7/22 74

pragma solidity > 0.4.4;
/* Define the smart contract Voting*/
contract Voting {

/*
Define a data structure called candidate
*/
struct candidate {

/*Name of the candidate*/
string name;
/*Count the voting results of the candidate*/
uint votes;

}
/* The list of all candidates. The example we only accepts 

three candidates*/
candidate[3] candidatelist;

/*The constructor function of the contract*/
constructor()

public
{

/*Initialize three candidates; their names, addresses and 
votes*/

} ….


Create a smart contract

• Operation of the voting smart contract

12/7/22 75


Create a smart contract

• Operation of the voting smart contract
• Obtain details of a candidate
• Vote a candidate
• Check the output (depends on the rule)

12/7/22 76


Cont.

• getCandidate
• voteCandidate
• getVoteResult

12/7/22 77

pragma solidity > 0.4.4;
/* Define the smart contract Voting*/
contract Voting {
…..

function getCandidate(uint id)
public
view
returns(string memory)

{… }
/* Vote a specific candidate*/
function voteCandidate(uint id)

public
{

if (id<candidatelist.length) {
candidatelist[id].votes+=1;

}
}
/* Get the voting results of a specific candidate*/
function getVoteResults(uint id)

public
view
returns(uint)

{ if (id<candidatelist.length) return candidatelist[id].votes;
}


Using Remix to edit and test the contract

• https://remix.ethereum.org/
• Compile
• Deploy
• Test

• But this is not real 
blockchain; it is an emulated 
environment

12/7/22 78

https://remix.ethereum.org/


Remix

12/7/22 79


Add extra features to the smart contract

• Avoid double voting
• Set constraints for voting

12/7/22 80


Discussion
• Menti.com
• Code 73576389

12/7/22 81


Summary

• Lab assignment
• Read more from the online book:
• https://github.com/ethereumbook/ethereumbook

12/7/22 82


